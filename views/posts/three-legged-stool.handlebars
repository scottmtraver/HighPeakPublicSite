<h3 class="ui center aligned header">&nbsp;</h3>

<div class="ui container text">
  <div class="ui relaxed divided items">
    <div class="item">
      <div class="content">
        <a class="header">Three Legged Stool</a>
        <div class="meta">
          <a>June 20, 2016</a>
          <a>Business, Web development, DevOps</a>
        </div>
        <div class="description">
          I clearly remember one of my second computer science classes, the professor stood up and reminded us “Software is like a bar stool”. He went on to describe what believe is one of the most beautiful metaphors in software development for business.
        </div>
        <img src="/img/posts/threeLeggedStool.jpg" title="Three Legged Stool" alt="Three Legged Stool">
        <div class="description">
          Building software is like a three legged stool made up of Features, Time, and Resources (manpower). To be stable the three legs must be the same ‘length’, and if not, you will end up with a slanted and unstable seat that may still work and sit on the floor properly but will not be comfortable or long term. As I have progressed in my web development career I have experienced firsthand the effects of each of these three things misjudged and the issues that arise with measuring, quantifying, scrutinizing and trying to balance them on the fly. Without a clear and concrete specification for an end goal, it is extremely difficult to manage features (often buzz-worded ‘scope creep’). Without a clear and concise business plan managing time, it can become the most pressing issue (both its expansion and collapse with the race towards deadlines). And without a proper internal development community, resources may be more variable than originally thought as technical debt and maintenance can often squeeze out primary development.
        </div>
        <br/>
        <h2>Features - Identify concrete goals</h2>
        <div class="description">
          In the software industry, platforms are in style. Many of the modern companies are not focused on creating products but instead creating ‘platforms’ for their/those products to exist on - allowing ample room for expansion and monetizing the whole marketplace. Even if this is a good goal, it is often so abstract there is nothing technology can do to create it. The concept of a marketplace can be so many things and include or not include so many features that the development process for the underlying software is riddled with premature addition after addition of the ‘What if the customer needs this?’. This pain is translated into the feature leg of the project growing sometimes exponentially, similar to science, there will always be another door to open. Without properly identifying (or even simply specifying) a few key features (sometimes called ‘MVP’) this can go on forever. Instead of trying to create a concrete solution (software) for an abstract problem, it is better to remember that software development is the creation of tools. Tools have a component that fits the user and a component that fits the problem, making it an extension of us (in software this manifests as an extension of our minds). By keeping this in mind it becomes much easier to identify one or two concrete goals (problems to solve) and make them the only features and centerpiece of your ‘platform’. This kind of focus stabilizes the feature leg of the development stool.
        </div>
        <div class="description">
          My current job is creating a platform and often I compare it to building a skyscraper. Management wants a skyscraper. Ok, residential or commercial? A skyscraper… How many floors? A skyscraper… Should it support helicopters landing on the roof? A skyscraper. Worse yet was when they demo to customers the empire state building and then say to us “Look! A skyscraper!”. The key to creating successful software is to build tools and solutions for concrete problems with the smallest possible scope. Don’t build ideas, make ideas a reality.
        </div>
        <br/>
        <h2>Time - Define practical needs for each stage</h2>
        <div class="description">
          After a central problem is selected, there may be some worldly requirements to produce the solution to the problem. Authentication, logging, user management, commenting, customization, what devices the program will work on… are all examples of services and extensions where business time can be spent long before a product goes ‘live’. Are any of these unnecessary for the problem (above) to be solved? What is the minimum form of authentication and user management necessary and what can be plugged in later (when there are more time and resources)? One of the best ways not to design the wrong thing and to identify users needs is talk to actual users! Many businesses think they need to have a product in order to demonstrate a product but current technologies provides numerous ways to demonstrate concept without the time or resources needed for construction. By getting feedback early on wireframes and mocks you can again stay focused on the end goal itself rather than nice details or distractions. Many times I find myself developing software for a business and I am not the target market or customer. In this situation users suprise me and validate some hypotheses but invalidate other ideas I had become fixated upon and insisting needed to be included. Becoming a data driven business (or building a product for yourself) is the most efficient way to manage project time.
        </div>
        <br/>
        <h2>Resources - Evolve internal practices</h2>
        <div class="description">
          Keeping good internal practices and teamwork can actually compress the resources leg of the project development giving your project more room for time and features. Internal practice include anything that makes the ground level construction workers happy. Fortunately modern companies acknowledge this and provide freedom (of tools), flexibility (of personal time) and are enabling developers to work at their own pace (by being results driven rather than intermediate deadline driven). Good tooling and dev-ops practices encourages efficiency while open source contributes to philanthropy and encourages collaboration (and progress - a rising tide lifts all boats). Fundamental to software development is the teamwork and joy of the ground level construction workers. Arguably the most successful projects I have ever been a part of have had the best dev-ops practices to facilitate current and future development. Investing in dev-ops can save time on the future stages of a project and is a way of minimally sacrificing short term gains for long term sustainability and progress. <a href="http://blog.crisp.se/2013/10/11/henrikkniberg/good-and-bad-technical-debt" target="_blank">A word on technical debt:</a> The WORST projects I have ever been a part of were managed by extremely shortsighted managers (probably pressured from higher management for demonstrable progress). By cornering developers into demonstrations of progress, you encourage a culture of short term thinking which leads to technical debt and can actually multiply a task’s work to completion time by 3 and 4 times due to rework (aka making things work for hard deadline demo). The effect of this is the same as cutting your resources in thirds or quarters to reach the same level standard of completion - even if the demo products ‘work’ and are approved at each point along the way. It also forces developers into getting a single product complete without making it extensible which more often than not is just as important as the individual project’s completion (because even management can’t predict the future). Sustainable pace is more important than a fast pace today.
        </div>
        <a href="http://blog.crisp.se/2013/07/12/henrikkniberg/the-solution-to-technical-debt" target="_blank" class="ui segment large image blog-image">
          <img src="/img/posts/technicalDebt.png" title="Technical Debt" alt="Technical Debt">
        </a>
        <div class="description">
          The goal should be to cultivate the environment that encourages the consideration of these three legs before each and every project as well as reviews them throughout. If this is possible within a company, the variety of expression and possibility to solve real world problems is truly limitless.
        </div>
        <br/>
        <hr/>
        <div class="extra">
          <span>Written By Scott Traver</span>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Call To Action -->
<div class="ui vertical stripe segment">
  <div class="ui text container">
    <div class="ui center aligned basic segment">
      <p>Need help identifying features, time or resources for your project?</p>
      <div class="ui green labeled icon button">
        <a class="js-email-event" href="mailto:scott@highpeaksolutions.com?Subject=Project" style="color:white;">Contact Me</a>
        <i class="mail outline icon"></i>
      </div>
    </div>
  </div>
</div>

