<h3 class="ui center aligned header">&nbsp;</h3>

<div class="ui container text">
  <div class="ui relaxed divided items">
    <div class="item">
      <div class="content">
        <a class="header">Your business won’t benefit from an App</a>
        <div class="meta">
          <a>April 17, 2016</a>
          <a>Mobile Development, Business, Tools</a>
        </div>
        <div class="description">
Mobile Apps are in right now. With over 179 Billion App Downloads in 2015, they are certainly a growing trend as mobile usage grows exponentially (apps are over 50% of mobile ‘online’ time). This growth brings a new extreme of competition for users attention, time and money.
I recently worked to build an eCommerce Mobile App using Ionicframework.        </div>
        <div class="description">
 My experience developing and releasing the app alongside the primary sales site created many interesting and heated discussions about the place of mobile apps and sites in the future of business. Two main questions dominated our decision making; namely whether to use a ‘framework’ and whether to have ‘site parity’ (equal function and design between mobile site and app).

        </div>
        <br/>
        <h2>The Debate Between Site and App is Complex as Human Nature</h2>
        <div class="description">
          Whenever building a site or app, you must first consider the real engagement goal of the project. Apps and Sites have vastly different techniques and reach, and their development should consider this. For example a mobile site can become a highly rated, reviewed, optimized search result that provides users a <strong>destination</strong> from another app or website (such as a search result, or social media share). This makes it a powerful place where users can come to, easily share, and use at their own convenience when they have a specific intent or purpose (such as a sales site, users come to with intent to browse or buy). Although this may parallel the use of an app, it has distinct advantages and limitations. Advantages of a mobile site over an app are the ease at which it is shared, updated, styled and generically targeted to devices (desktop, mobile, tablet). There is no need for version management, update pipelines, less device specific styling and it can grow more easily in brand awareness because it is not tied to the limited marketplace where apps live.
        </div>
        <div class="callout">
          The primary disadvantage of a mobile site is often <strong>mistakenly</strong> seen as the primary advantages of an app: apps hold a special icon on the users phone; and they can alert at any time.
        </div>
        <div class="description">
Many businesses believe they need an app to engage customers because the growing number of (unicorn) success stories of apps which have dominated the news. Apps do hold a special place icon on users phones and yes, they do allow you to send push notifications and wake up the user when the business deems best (if users allow notifications). But these come at the cost of the constant pressure and competition of driving engagement and usefulness. Over 80 percent of apps are downloaded and used once and eventually deleted from a users phone and roughly only 16 percent of users will re-download a third time if the app was disappointing. That puts a tremendous amount of pressure on development of an app as well as the brand management and engagement to keep the app relevant to the users!
        </div>
        <br/>
        <h2>Your choice of technology sticks with you a long time</h2>
        <div class="description">
However, to effectively deliver apps within a business timeline, companies are turning to app frameworks that allow web developers to build a mobile-like website using web technologies then converting it into a downloadable app (such as tabirisJS, ionicFramework, cordova or phone gap). This can be extremely helpful and hurtful.</div>
        <div class="callout">
Frameworks are helpful because they allow more generalized web developers and designers to create apps; hurtful because they are creating an ecosystem where less than qualified programmers are creating overly complex systems for mobile architecture.
        </div>
        <div class="description">
          When building an app (or any embedded system) there are specific complications and concerns: limited memory management, power consumption, network usage and saturation, content storage, resource competition with other apps, updates, version management and authentication. In contrast, mobile websites are highly sandboxed in the browser, and their usually short lifespan (time of use per session) protects them from many of these concerns. Although frameworks have opened app development to a wider community, the cost of this expansion is a steep harsh learning curve as web developers dive headfirst into creating apps based on web development principals instead of specific app design guidelines.
        </div>
        <div class="description">
To dive a little deeper, my personal experience with IonicFramework greatly emphasized two of these problems. First, my study and knowledge of high performance website development principals did not always translate from site development to app development. Apps get download once in a package where the program lives and then the content inside the app  can get downloaded on demand. This is a shift from web site principals where the entire application delivery must be optimized. As a result, to achieve site parity, many aspects of our over all system had to be duplicated in both the app and the site (generating extra code, styling, maintenance - it easily and regularly fell out of sync between site and app). These ties also led to many business choices about the website systems which affected and became poor design choices for the app and forced a choice: take time to rework both systems or continue with a less desirable app experience (often a business decision made against limited budget and deadlines…).
          
        </div>
        <div class="description">
          Secondly, memory and resource management (not often considered by web developers) became a major pain-point due to our app’s image intensive nature. There happened to be a bug in ionic framework itself where the wrapper (ionicframework’s webview) was not releasing the program memory (angularJS) and the app would regularly crash other apps on the users phone as well as itself. <strong>Without phone development experience, and using a closed and young framework I was not equipped to debug this issue</strong> and spent over a week struggling to pinpoint the bug and solve the issue (delaying launch several times).
        </div>
        <a href="/img/posts/site-vs-app.png" target="_blank" class="ui segment large image blog-image">
          <img src="/img/posts/site-vs-app.png" title="Mobile Site vs Mobile App Comparison" alt="Mobile Site vs Mobile App Comparison">
        </a>
        <div class="description">
          While mobile apps may be the future for interactive, computational or repeat use applications, they are often not the best solution for small businesses without established company/brand loyalty and exposure. The costs of the app development lifecycle often outweigh the advantages where a simple mobile site will do.
        </div>

        <hr/>
        <div class="extra">
          <span>Written By Scott Traver</span>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Call To Action -->
<div class="ui vertical stripe segment">
  <div class="ui text container">
    <div class="ui center aligned basic segment">
      <p>Will your business benifit more from a new site or mobile app?</p>
      <div class="ui green labeled icon button">
        <a class="js-email-event" href="mailto:scott@highpeaksolutions.com?Subject=Hello" style="color:white;">Contact Me</a>
        <i class="mail outline icon"></i>
      </div>
    </div>
  </div>
</div>



