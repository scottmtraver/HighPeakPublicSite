<h3 class="ui center aligned header">&nbsp;</h3>

<div class="ui container text">
  <div class="ui relaxed divided items">
    <div class="item">
      <div class="content">
        <a class="header">Firefighting vs Construction</a>
        <div class="meta">
          <a>Oct 24, 2016</a>
          <a>Business, Management, DevOps</a>
        </div>
        <div class="description">
          I’m piggybacking my post on this brilliant rant about the state of software development in my generation.
        </div>
        <a href="https://medium.com/@bryanedds/living-in-the-age-of-software-fuckery-8859f81ca877#.7ot1eovv7" target="_blank" class="ui segment large image blog-image">
          <img src="https://cdn-images-1.medium.com/max/2000/1*xImxcl149ZX5gkRhZCFF-A.png" title="Burning City" alt="Burning City">
        </a>
        <div class="description">
          <a href="https://medium.com/@bryanedds/living-in-the-age-of-software-fuckery-8859f81ca877#.7ot1eovv7" target="_blank" >
            Ten Anti-patterns and Malpractices in Modern Software Development
          </a>
        </div>
        <div class="description">
          At my 3 professional software positions (and some freelancing), the same patterns repeat themselves as teams hire to grow and start new projects. Every addition to the team and new project kickoff is like a newborn, blameless and pure for around 10 seconds.
Every time a business starts a new project it has the opportunity to work the current best practices into as many areas of development as possible. Yes, this isn’t a perfect solution but it should highlight lots and lots of learnings from everyone who has made the software engineering mistakes already and created these best practices in the first place. I will take Test Driven Development as my example here but the lesson learned can be applied to any methodology picked for a new project or team.
        </div>
        <div class="description">
          Every time we a new project is started, there is the opportunity for <a href="http://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html" target="_blank">proper TDD</a>. This is an amazing statement full of peril from the first commit (motivation? sometimes easy - discipline? HARD). As a project is often the push and pull between business constraints and deadlines and engineering perfectionism, the first arguments are laid bare by the first real business goal (usually in the format of a functional deadline). The case is made that 100% test coverage is unreasonable, or that we should test critical paths. Suddenly developers find themselves slipping to identify critical paths (not knowing the business domain) or pushing the responsibility onto other teams (QA) because it’s not ‘exciting’ work.
I have even seen it become a religious argument about whether or not to do TDD or just adhere to test coverage. For example, my coworker said that it was more of a ‘way I work thing’ to write tests first. Although that may be true, it is just another slip! Without tests first, you end up writing code. Then writing tests that either write to the code or discovering missed edge cases from your written tests causing you to have to go back and fix the code 1,2,3 instead of a simple 1,2 design first approach.
        </div>
        <div class="description">
          This highlights the next hurdle teams must get over after they have already slipped - Design First (hand in hand with requirements first). As <a href="https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670" target="_blank">I re-read Code Complete each year</a> I am constantly reminded that <a href="https://www.amazon.com/Ego-Enemy-Ryan-Holiday/dp/1591847818/ref=sr_1_1?s=books&ie=UTF8&qid=1477367783&sr=1-1&keywords=ego+is+the+enemy" target="_blank">Ego is the enemy.</a> Each time I read it I am amazed at the amount of development I have done in recent months that would have benefited and been completed drastically sooner rather than letting requirements shift beneath the structure I was trying to build. This is another pain point for engineers because it is often the difference between being a scientist and a politician (as highlighted in the article). Those developers that rise to the top are often better at communicating than coding. In the short term this can be extremely useful as they are often the most provocative for teasing out requirements quickly and accelerating work for the ‘get things done’ boss pleasing or ‘story points’ in sprints approach and metrics that often haunt engineers. But in the long term this often comes crashing down as the technical weight of a project increases with each untested and poorly designed feature and team member introduced to the poorly planned (or organized) codebase.
        </div>
        <div class="description">
          A final frustration from this devastating (from a development perspective) cycle is how often it bleeds into the organization and business itself. As a project meets deadlines by shortcuts and agile methodology, the business is encouraged to continue the same way of operating and it becomes its fuel. Agile and short sprints are good in theory because the claim to ‘never close doors’ or ‘never be blocked’ or ‘be down the wrong path too long’. But in reality this communal organization of code ownership and shortcuts is actually a weak structure to build on and does not promote specialization, expertise, or the time it takes to architect the appropriate solution. My favorite quote is if you want a Mercedes but have designed a Honda, no matter how many resources you throw at the project you will never be satisfied.
        </div>
        <div class="description">
          This is personally my third iteration and frankly, I’m terrified of the result. I wish I could confidently claim I will strike out on my own but I also fear I may make the same mistakes when faced with true business decisions. It is easy to condemn a practice without providing an honest solution which is why I was pleasantly surprised that <a href="https://medium.com/@bryanedds/living-in-the-age-of-software-fuckery-8859f81ca877#.7ot1eovv7" target="_blank">this article recommended some starting places.</a> It is not an easy path (and I definitely don’t know all of it yet!) but I am a believer in the great things technology can and will do. Starting small I plan on having the discipline to push back at my work and transition from being a firefighter to a true software architect.
        </div>
        <div class="description">
          <strong>Wish Me Luck!</strong>
        </div>
        <br/>
        <hr/>
        <div class="extra">
          <span>Written By Scott Traver</span>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Call To Action -->
<div class="ui vertical stripe segment">
  <div class="ui text container">
    <div class="ui center aligned basic segment">
      <p>Need project roadmapping to avoid management hurdles?</p>
      <div class="ui green labeled icon button">
        <a class="js-email-event" href="mailto:scott@highpeaksolutions.com?Subject=Project" style="color:white;">Contact Me</a>
        <i class="mail outline icon"></i>
      </div>
    </div>
  </div>
</div>



