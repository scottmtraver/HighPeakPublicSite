<h3 class="ui center aligned header">&nbsp;</h3>

<div class="ui container text">
  <div class="ui relaxed divided items">
    <div class="item">
      <div class="content">
        <a class="header">Making Tools</a>
        <div class="meta">
          <a>July 12, 2016</a>
          <a>Web development, DevOps</a>
        </div>
        <div class="description">
At my new position we are on a new project to make the brand new, next generation product for our company using software. Software is about reducing repetition, fully utilizing the powers of technology and making tools. As a result, I spend a lot of time thinking about what the next generation of tools will look like and how we will interact with them to solve problems. Often this means putting thought into the best way to get the technology out of the way between the human and the solution to the problem being solved. One of my favorite reads is this rant on interaction design:
        </div>
        <a href="http://worrydream.com/ABriefRantOnTheFutureOfInteractionDesign/" target="_blank" class="ui segment large image blog-image">
          <img src="/img/posts/tools.png" title="Handheld Tools" alt="Handheld Tools">
        </a>
        <div class="description">
What really resonates with me from this is how tools can be looked at as three parts: the part that fits the problem, the part that fits or extends the human and the middle part. Software is often seen as the defacto middle part (technology or science part) for most mental or thinking/processing problems because computers are good at calculations and computations. But this raises two questions as more and more, technology choices by development shops last longer and longer through a company's product line lifecycle and influence the course of a business. How can we make the best interface without sacrificing the solution? And How can we make the best solution without sacrificing the interface?
        </div>
        <div class="description">
          No one likes to use poorly designed software - which can come about as a result of the answers to both of the above questions. A solution can be elegant and performant but only take input from a textbox (or terminal) using a lot of assumed domain knowledge and/or configuration; or it could be beautiful and highly interactive but lack necessary features to fully solve the problem or reduce the redundant work. Much of this stems from the disconnect between the creators and the users. As a software developer I regularly forget I am not the target audience for many of the products I build. Sometimes it is important to take a step back and get actual use cases. This means stopping development work, feature work, and planning to take an honest user and provide them with the tool (and the desired level of training) and make sure it solves the real problem it is intended to solve.
        </div>
        <div class="description">
          There is an attempt emphasize this practice in agile software development by making all stories (cards, issues…) into ‘user stories’ - meaning they all have a deliverable experience component (UI/UX, a button, a feature, an action or transition). Although in the right mindset, this often isn’t fully the answer. This methodology often solves a different problem of having readily available/usable/deployable software at any time. It has the appearance of solving the ‘part that fits the user’ problem but doesn’t provide space for the ‘best quality solution’ part. Although this may facilitate efficient development in pre launch products and shorten the feedback cycle, it can overemphasize short term goals which in turn de-emphasizes long term planning and does not protect you from building the wrong product all together. It is a very micro level view to the software development process as a whole.
        </div>
        <div class="description">
          To protect against this I try to find the balance between scope creep, project velocity and technical weight [link to three legged stool!!!] by answering two simple questions - Do I know my users? Can they demonstrate what they want to me (in an end to end sense)? Truly knowing your users (having them in house is even better or best is being one yourself) is the key to solving real problems. Getting them to demonstrate their work is the key to designing (not over designing) great products (tools). These two things should influence every product decision that is made, before it gets to the development team. Careful planning of this includes turning the list of demands into an appropriate timeline for work (respect to product managers - this is often a difficult task!). These two questions directly reflect the two problem statements surrounding a well designed tool: the human part and the solution part. Bookending your system with these ensures you don’t solve problems you don’t have or miss essential requirements. Just what is necessary.
        </div>
        <a href="https://m.signalvnoise.com/why-i-love-ugly-messy-interfaces-and-you-probably-do-too-edff4a896a83#.o3s8h1ljv" target="_blank" class="ui segment large image blog-image">
          <img src="/img/posts/clutter.png" title="Cluttered Design" alt="Cluttered Design">
        </a>
        <div class="description">
          Answering the above questions will let you develop the best interface without compromising the solution, and create the best (yet most minimum) possible solution while keeping it highly usable. These are beautiful tools. Tools where the interface fades away and users feel like they themselves are tackling problems or doing work with superhuman abilities. Tools that are simply a joy to use and everything we need is at our fingertips. This is the goal. This is the future I aim to create.
        </div>
        <br/>
        <hr/>
        <div class="extra">
          <span>Written By Scott Traver</span>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Call To Action -->
<div class="ui vertical stripe segment">
  <div class="ui text container">
    <div class="ui center aligned basic segment">
      <p>Does your software solution make your users feel superhuman?</p>
      <div class="ui green labeled icon button">
        <a class="js-email-event" href="mailto:scott@highpeaksolutions.com?Subject=Project" style="color:white;">Contact Me</a>
        <i class="mail outline icon"></i>
      </div>
    </div>
  </div>
</div>


